// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Cosmos.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum TW_Cosmos_Proto_BroadcastMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Wait for the tx to pass/fail CheckTx, DeliverTx, and be committed in a block
  case block // = 0

  /// Wait for the tx to pass/fail CheckTx
  case sync // = 1

  /// Don't wait for pass/fail CheckTx; send and return tx immediately
  case async // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .block
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .block
    case 1: self = .sync
    case 2: self = .async
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .block: return 0
    case .sync: return 1
    case .async: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Cosmos_Proto_BroadcastMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Cosmos_Proto_BroadcastMode] = [
    .block,
    .sync,
    .async,
  ]
}

#endif  // swift(>=4.2)

public struct TW_Cosmos_Proto_Amount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var denom: String = String()

  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Cosmos_Proto_Fee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var amounts: [TW_Cosmos_Proto_Amount] = []

  public var gas: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Cosmos_Proto_Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var messageOneof: TW_Cosmos_Proto_Message.OneOf_MessageOneof? = nil

  public var sendCoinsMessage: TW_Cosmos_Proto_Message.Send {
    get {
      if case .sendCoinsMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.Send()
    }
    set {messageOneof = .sendCoinsMessage(newValue)}
  }

  public var stakeMessage: TW_Cosmos_Proto_Message.Delegate {
    get {
      if case .stakeMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.Delegate()
    }
    set {messageOneof = .stakeMessage(newValue)}
  }

  public var unstakeMessage: TW_Cosmos_Proto_Message.Undelegate {
    get {
      if case .unstakeMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.Undelegate()
    }
    set {messageOneof = .unstakeMessage(newValue)}
  }

  public var restakeMessage: TW_Cosmos_Proto_Message.BeginRedelegate {
    get {
      if case .restakeMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.BeginRedelegate()
    }
    set {messageOneof = .restakeMessage(newValue)}
  }

  public var withdrawStakeRewardMessage: TW_Cosmos_Proto_Message.WithdrawDelegationReward {
    get {
      if case .withdrawStakeRewardMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.WithdrawDelegationReward()
    }
    set {messageOneof = .withdrawStakeRewardMessage(newValue)}
  }

  public var rawJsonMessage: TW_Cosmos_Proto_Message.RawJSON {
    get {
      if case .rawJsonMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.RawJSON()
    }
    set {messageOneof = .rawJsonMessage(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case sendCoinsMessage(TW_Cosmos_Proto_Message.Send)
    case stakeMessage(TW_Cosmos_Proto_Message.Delegate)
    case unstakeMessage(TW_Cosmos_Proto_Message.Undelegate)
    case restakeMessage(TW_Cosmos_Proto_Message.BeginRedelegate)
    case withdrawStakeRewardMessage(TW_Cosmos_Proto_Message.WithdrawDelegationReward)
    case rawJsonMessage(TW_Cosmos_Proto_Message.RawJSON)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Cosmos_Proto_Message.OneOf_MessageOneof, rhs: TW_Cosmos_Proto_Message.OneOf_MessageOneof) -> Bool {
      switch (lhs, rhs) {
      case (.sendCoinsMessage(let l), .sendCoinsMessage(let r)): return l == r
      case (.stakeMessage(let l), .stakeMessage(let r)): return l == r
      case (.unstakeMessage(let l), .unstakeMessage(let r)): return l == r
      case (.restakeMessage(let l), .restakeMessage(let r)): return l == r
      case (.withdrawStakeRewardMessage(let l), .withdrawStakeRewardMessage(let r)): return l == r
      case (.rawJsonMessage(let l), .rawJsonMessage(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// cosmos-sdk/MsgSend
  public struct Send {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var fromAddress: String = String()

    public var toAddress: String = String()

    public var amounts: [TW_Cosmos_Proto_Amount] = []

    public var typePrefix: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// cosmos-sdk/MsgDelegate to stake
  public struct Delegate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var delegatorAddress: String = String()

    public var validatorAddress: String = String()

    public var amount: TW_Cosmos_Proto_Amount {
      get {return _amount ?? TW_Cosmos_Proto_Amount()}
      set {_amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    public var hasAmount: Bool {return self._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    public mutating func clearAmount() {self._amount = nil}

    public var typePrefix: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _amount: TW_Cosmos_Proto_Amount? = nil
  }

  /// cosmos-sdk/MsgUndelegate to unstake
  public struct Undelegate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var delegatorAddress: String = String()

    public var validatorAddress: String = String()

    public var amount: TW_Cosmos_Proto_Amount {
      get {return _amount ?? TW_Cosmos_Proto_Amount()}
      set {_amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    public var hasAmount: Bool {return self._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    public mutating func clearAmount() {self._amount = nil}

    public var typePrefix: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _amount: TW_Cosmos_Proto_Amount? = nil
  }

  /// cosmos-sdk/MsgBeginRedelegate
  public struct BeginRedelegate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var delegatorAddress: String = String()

    public var validatorSrcAddress: String = String()

    public var validatorDstAddress: String = String()

    public var amount: TW_Cosmos_Proto_Amount {
      get {return _amount ?? TW_Cosmos_Proto_Amount()}
      set {_amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    public var hasAmount: Bool {return self._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    public mutating func clearAmount() {self._amount = nil}

    public var typePrefix: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _amount: TW_Cosmos_Proto_Amount? = nil
  }

  /// cosmos-sdk/MsgWithdrawDelegationReward
  public struct WithdrawDelegationReward {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var delegatorAddress: String = String()

    public var validatorAddress: String = String()

    public var typePrefix: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct RawJSON {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: String = String()

    public var value: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Input data necessary to create a signed order.
public struct TW_Cosmos_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountNumber: UInt64 = 0

  public var chainID: String = String()

  public var fee: TW_Cosmos_Proto_Fee {
    get {return _fee ?? TW_Cosmos_Proto_Fee()}
    set {_fee = newValue}
  }
  /// Returns true if `fee` has been explicitly set.
  public var hasFee: Bool {return self._fee != nil}
  /// Clears the value of `fee`. Subsequent reads from it will return its default value.
  public mutating func clearFee() {self._fee = nil}

  public var memo: String = String()

  public var sequence: UInt64 = 0

  public var privateKey: Data = SwiftProtobuf.Internal.emptyData

  public var messages: [TW_Cosmos_Proto_Message] = []

  public var mode: TW_Cosmos_Proto_BroadcastMode = .block

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fee: TW_Cosmos_Proto_Fee? = nil
}

/// Transaction signing output.
public struct TW_Cosmos_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signature
  public var signature: Data = SwiftProtobuf.Internal.emptyData

  /// Signed transaction in JSON.
  public var json: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Cosmos.Proto"

extension TW_Cosmos_Proto_BroadcastMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BLOCK"),
    1: .same(proto: "SYNC"),
    2: .same(proto: "ASYNC"),
  ]
}

extension TW_Cosmos_Proto_Amount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Amount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.denom)
      case 2: try decoder.decodeSingularInt64Field(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Amount, rhs: TW_Cosmos_Proto_Amount) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Fee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Fee"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amounts"),
    2: .same(proto: "gas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.amounts)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.gas)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amounts, fieldNumber: 1)
    }
    if self.gas != 0 {
      try visitor.visitSingularUInt64Field(value: self.gas, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Fee, rhs: TW_Cosmos_Proto_Fee) -> Bool {
    if lhs.amounts != rhs.amounts {return false}
    if lhs.gas != rhs.gas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "send_coins_message"),
    2: .standard(proto: "stake_message"),
    3: .standard(proto: "unstake_message"),
    4: .standard(proto: "restake_message"),
    5: .standard(proto: "withdraw_stake_reward_message"),
    6: .standard(proto: "raw_json_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: TW_Cosmos_Proto_Message.Send?
        if let current = self.messageOneof {
          try decoder.handleConflictingOneOf()
          if case .sendCoinsMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.messageOneof = .sendCoinsMessage(v)}
      case 2:
        var v: TW_Cosmos_Proto_Message.Delegate?
        if let current = self.messageOneof {
          try decoder.handleConflictingOneOf()
          if case .stakeMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.messageOneof = .stakeMessage(v)}
      case 3:
        var v: TW_Cosmos_Proto_Message.Undelegate?
        if let current = self.messageOneof {
          try decoder.handleConflictingOneOf()
          if case .unstakeMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.messageOneof = .unstakeMessage(v)}
      case 4:
        var v: TW_Cosmos_Proto_Message.BeginRedelegate?
        if let current = self.messageOneof {
          try decoder.handleConflictingOneOf()
          if case .restakeMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.messageOneof = .restakeMessage(v)}
      case 5:
        var v: TW_Cosmos_Proto_Message.WithdrawDelegationReward?
        if let current = self.messageOneof {
          try decoder.handleConflictingOneOf()
          if case .withdrawStakeRewardMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.messageOneof = .withdrawStakeRewardMessage(v)}
      case 6:
        var v: TW_Cosmos_Proto_Message.RawJSON?
        if let current = self.messageOneof {
          try decoder.handleConflictingOneOf()
          if case .rawJsonMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.messageOneof = .rawJsonMessage(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.messageOneof {
    case .sendCoinsMessage(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .stakeMessage(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .unstakeMessage(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .restakeMessage(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .withdrawStakeRewardMessage(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .rawJsonMessage(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message, rhs: TW_Cosmos_Proto_Message) -> Bool {
    if lhs.messageOneof != rhs.messageOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.Send: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".Send"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
    2: .standard(proto: "to_address"),
    3: .same(proto: "amounts"),
    4: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.fromAddress)
      case 2: try decoder.decodeSingularStringField(value: &self.toAddress)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.amounts)
      case 4: try decoder.decodeSingularStringField(value: &self.typePrefix)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.fromAddress, fieldNumber: 1)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 2)
    }
    if !self.amounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amounts, fieldNumber: 3)
    }
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.Send, rhs: TW_Cosmos_Proto_Message.Send) -> Bool {
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.amounts != rhs.amounts {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.Delegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".Delegate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .same(proto: "amount"),
    4: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.delegatorAddress)
      case 2: try decoder.decodeSingularStringField(value: &self.validatorAddress)
      case 3: try decoder.decodeSingularMessageField(value: &self._amount)
      case 4: try decoder.decodeSingularStringField(value: &self.typePrefix)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.Delegate, rhs: TW_Cosmos_Proto_Message.Delegate) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.Undelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".Undelegate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .same(proto: "amount"),
    4: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.delegatorAddress)
      case 2: try decoder.decodeSingularStringField(value: &self.validatorAddress)
      case 3: try decoder.decodeSingularMessageField(value: &self._amount)
      case 4: try decoder.decodeSingularStringField(value: &self.typePrefix)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.Undelegate, rhs: TW_Cosmos_Proto_Message.Undelegate) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.BeginRedelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".BeginRedelegate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_src_address"),
    3: .standard(proto: "validator_dst_address"),
    4: .same(proto: "amount"),
    5: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.delegatorAddress)
      case 2: try decoder.decodeSingularStringField(value: &self.validatorSrcAddress)
      case 3: try decoder.decodeSingularStringField(value: &self.validatorDstAddress)
      case 4: try decoder.decodeSingularMessageField(value: &self._amount)
      case 5: try decoder.decodeSingularStringField(value: &self.typePrefix)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorSrcAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorSrcAddress, fieldNumber: 2)
    }
    if !self.validatorDstAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorDstAddress, fieldNumber: 3)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.BeginRedelegate, rhs: TW_Cosmos_Proto_Message.BeginRedelegate) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorSrcAddress != rhs.validatorSrcAddress {return false}
    if lhs.validatorDstAddress != rhs.validatorDstAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.WithdrawDelegationReward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".WithdrawDelegationReward"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.delegatorAddress)
      case 2: try decoder.decodeSingularStringField(value: &self.validatorAddress)
      case 3: try decoder.decodeSingularStringField(value: &self.typePrefix)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.WithdrawDelegationReward, rhs: TW_Cosmos_Proto_Message.WithdrawDelegationReward) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.RawJSON: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".RawJSON"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.RawJSON, rhs: TW_Cosmos_Proto_Message.RawJSON) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_number"),
    2: .standard(proto: "chain_id"),
    3: .same(proto: "fee"),
    4: .same(proto: "memo"),
    5: .same(proto: "sequence"),
    6: .standard(proto: "private_key"),
    7: .same(proto: "messages"),
    8: .same(proto: "mode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.accountNumber)
      case 2: try decoder.decodeSingularStringField(value: &self.chainID)
      case 3: try decoder.decodeSingularMessageField(value: &self._fee)
      case 4: try decoder.decodeSingularStringField(value: &self.memo)
      case 5: try decoder.decodeSingularUInt64Field(value: &self.sequence)
      case 6: try decoder.decodeSingularBytesField(value: &self.privateKey)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.messages)
      case 8: try decoder.decodeSingularEnumField(value: &self.mode)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.accountNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.accountNumber, fieldNumber: 1)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 2)
    }
    if let v = self._fee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.memo.isEmpty {
      try visitor.visitSingularStringField(value: self.memo, fieldNumber: 4)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 5)
    }
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 6)
    }
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 7)
    }
    if self.mode != .block {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_SigningInput, rhs: TW_Cosmos_Proto_SigningInput) -> Bool {
    if lhs.accountNumber != rhs.accountNumber {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs._fee != rhs._fee {return false}
    if lhs.memo != rhs.memo {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.messages != rhs.messages {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .same(proto: "json"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.signature)
      case 2: try decoder.decodeSingularStringField(value: &self.json)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 1)
    }
    if !self.json.isEmpty {
      try visitor.visitSingularStringField(value: self.json, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_SigningOutput, rhs: TW_Cosmos_Proto_SigningOutput) -> Bool {
    if lhs.signature != rhs.signature {return false}
    if lhs.json != rhs.json {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
