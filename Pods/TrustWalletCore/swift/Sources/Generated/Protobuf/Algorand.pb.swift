// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Algorand.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct TW_Algorand_Proto_TransactionPay {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var toAddress: String = String()

  public var fee: UInt64 = 0

  public var amount: UInt64 = 0

  public var firstRound: UInt64 = 0

  public var lastRound: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Input data necessary to create a signed transaction.
public struct TW_Algorand_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// netowrk / chain id
  public var genesisID: String = String()

  /// network / chain hash
  public var genesisHash: Data = SwiftProtobuf.Internal.emptyData

  /// binary note data
  public var note: Data = SwiftProtobuf.Internal.emptyData

  /// private key
  public var privateKey: Data = SwiftProtobuf.Internal.emptyData

  public var messageOneof: TW_Algorand_Proto_SigningInput.OneOf_MessageOneof? = nil

  public var transactionPay: TW_Algorand_Proto_TransactionPay {
    get {
      if case .transactionPay(let v)? = messageOneof {return v}
      return TW_Algorand_Proto_TransactionPay()
    }
    set {messageOneof = .transactionPay(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_MessageOneof: Equatable {
    case transactionPay(TW_Algorand_Proto_TransactionPay)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Algorand_Proto_SigningInput.OneOf_MessageOneof, rhs: TW_Algorand_Proto_SigningInput.OneOf_MessageOneof) -> Bool {
      switch (lhs, rhs) {
      case (.transactionPay(let l), .transactionPay(let r)): return l == r
      }
    }
  #endif
  }

  public init() {}
}

/// Transaction signing output.
public struct TW_Algorand_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signed and encoded transaction bytes.
  public var encoded: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Algorand.Proto"

extension TW_Algorand_Proto_TransactionPay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionPay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "to_address"),
    2: .same(proto: "fee"),
    3: .same(proto: "amount"),
    4: .standard(proto: "first_round"),
    5: .standard(proto: "last_round"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.toAddress)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.fee)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.amount)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.firstRound)
      case 5: try decoder.decodeSingularUInt64Field(value: &self.lastRound)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 1)
    }
    if self.fee != 0 {
      try visitor.visitSingularUInt64Field(value: self.fee, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    if self.firstRound != 0 {
      try visitor.visitSingularUInt64Field(value: self.firstRound, fieldNumber: 4)
    }
    if self.lastRound != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastRound, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Algorand_Proto_TransactionPay, rhs: TW_Algorand_Proto_TransactionPay) -> Bool {
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.fee != rhs.fee {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.firstRound != rhs.firstRound {return false}
    if lhs.lastRound != rhs.lastRound {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Algorand_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "genesis_id"),
    2: .standard(proto: "genesis_hash"),
    3: .same(proto: "note"),
    4: .standard(proto: "private_key"),
    10: .standard(proto: "transaction_pay"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.genesisID)
      case 2: try decoder.decodeSingularBytesField(value: &self.genesisHash)
      case 3: try decoder.decodeSingularBytesField(value: &self.note)
      case 4: try decoder.decodeSingularBytesField(value: &self.privateKey)
      case 10:
        var v: TW_Algorand_Proto_TransactionPay?
        if let current = self.messageOneof {
          try decoder.handleConflictingOneOf()
          if case .transactionPay(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.messageOneof = .transactionPay(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.genesisID.isEmpty {
      try visitor.visitSingularStringField(value: self.genesisID, fieldNumber: 1)
    }
    if !self.genesisHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.genesisHash, fieldNumber: 2)
    }
    if !self.note.isEmpty {
      try visitor.visitSingularBytesField(value: self.note, fieldNumber: 3)
    }
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 4)
    }
    if case .transactionPay(let v)? = self.messageOneof {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Algorand_Proto_SigningInput, rhs: TW_Algorand_Proto_SigningInput) -> Bool {
    if lhs.genesisID != rhs.genesisID {return false}
    if lhs.genesisHash != rhs.genesisHash {return false}
    if lhs.note != rhs.note {return false}
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.messageOneof != rhs.messageOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Algorand_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoded"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.encoded)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Algorand_Proto_SigningOutput, rhs: TW_Algorand_Proto_SigningOutput) -> Bool {
    if lhs.encoded != rhs.encoded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
