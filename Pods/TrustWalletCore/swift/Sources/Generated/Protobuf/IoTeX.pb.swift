// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: IoTeX.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct TW_IoTeX_Proto_Transfer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var amount: String = String()

  public var recipient: String = String()

  public var payload: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_IoTeX_Proto_Staking {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var message: TW_IoTeX_Proto_Staking.OneOf_Message? = nil

  public var stakeCreate: TW_IoTeX_Proto_Staking.Create {
    get {
      if case .stakeCreate(let v)? = message {return v}
      return TW_IoTeX_Proto_Staking.Create()
    }
    set {message = .stakeCreate(newValue)}
  }

  public var stakeUnstake: TW_IoTeX_Proto_Staking.Reclaim {
    get {
      if case .stakeUnstake(let v)? = message {return v}
      return TW_IoTeX_Proto_Staking.Reclaim()
    }
    set {message = .stakeUnstake(newValue)}
  }

  public var stakeWithdraw: TW_IoTeX_Proto_Staking.Reclaim {
    get {
      if case .stakeWithdraw(let v)? = message {return v}
      return TW_IoTeX_Proto_Staking.Reclaim()
    }
    set {message = .stakeWithdraw(newValue)}
  }

  public var stakeAddDeposit: TW_IoTeX_Proto_Staking.AddDeposit {
    get {
      if case .stakeAddDeposit(let v)? = message {return v}
      return TW_IoTeX_Proto_Staking.AddDeposit()
    }
    set {message = .stakeAddDeposit(newValue)}
  }

  public var stakeRestake: TW_IoTeX_Proto_Staking.Restake {
    get {
      if case .stakeRestake(let v)? = message {return v}
      return TW_IoTeX_Proto_Staking.Restake()
    }
    set {message = .stakeRestake(newValue)}
  }

  public var stakeChangeCandidate: TW_IoTeX_Proto_Staking.ChangeCandidate {
    get {
      if case .stakeChangeCandidate(let v)? = message {return v}
      return TW_IoTeX_Proto_Staking.ChangeCandidate()
    }
    set {message = .stakeChangeCandidate(newValue)}
  }

  public var stakeTransferOwnership: TW_IoTeX_Proto_Staking.TransferOwnership {
    get {
      if case .stakeTransferOwnership(let v)? = message {return v}
      return TW_IoTeX_Proto_Staking.TransferOwnership()
    }
    set {message = .stakeTransferOwnership(newValue)}
  }

  public var candidateRegister: TW_IoTeX_Proto_Staking.CandidateRegister {
    get {
      if case .candidateRegister(let v)? = message {return v}
      return TW_IoTeX_Proto_Staking.CandidateRegister()
    }
    set {message = .candidateRegister(newValue)}
  }

  public var candidateUpdate: TW_IoTeX_Proto_Staking.CandidateBasicInfo {
    get {
      if case .candidateUpdate(let v)? = message {return v}
      return TW_IoTeX_Proto_Staking.CandidateBasicInfo()
    }
    set {message = .candidateUpdate(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Message: Equatable {
    case stakeCreate(TW_IoTeX_Proto_Staking.Create)
    case stakeUnstake(TW_IoTeX_Proto_Staking.Reclaim)
    case stakeWithdraw(TW_IoTeX_Proto_Staking.Reclaim)
    case stakeAddDeposit(TW_IoTeX_Proto_Staking.AddDeposit)
    case stakeRestake(TW_IoTeX_Proto_Staking.Restake)
    case stakeChangeCandidate(TW_IoTeX_Proto_Staking.ChangeCandidate)
    case stakeTransferOwnership(TW_IoTeX_Proto_Staking.TransferOwnership)
    case candidateRegister(TW_IoTeX_Proto_Staking.CandidateRegister)
    case candidateUpdate(TW_IoTeX_Proto_Staking.CandidateBasicInfo)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_IoTeX_Proto_Staking.OneOf_Message, rhs: TW_IoTeX_Proto_Staking.OneOf_Message) -> Bool {
      switch (lhs, rhs) {
      case (.stakeCreate(let l), .stakeCreate(let r)): return l == r
      case (.stakeUnstake(let l), .stakeUnstake(let r)): return l == r
      case (.stakeWithdraw(let l), .stakeWithdraw(let r)): return l == r
      case (.stakeAddDeposit(let l), .stakeAddDeposit(let r)): return l == r
      case (.stakeRestake(let l), .stakeRestake(let r)): return l == r
      case (.stakeChangeCandidate(let l), .stakeChangeCandidate(let r)): return l == r
      case (.stakeTransferOwnership(let l), .stakeTransferOwnership(let r)): return l == r
      case (.candidateRegister(let l), .candidateRegister(let r)): return l == r
      case (.candidateUpdate(let l), .candidateUpdate(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// create stake
  public struct Create {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var candidateName: String = String()

    public var stakedAmount: String = String()

    public var stakedDuration: UInt32 = 0

    public var autoStake: Bool = false

    public var payload: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// unstake or withdraw
  public struct Reclaim {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bucketIndex: UInt64 = 0

    public var payload: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// add the amount of bucket
  public struct AddDeposit {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bucketIndex: UInt64 = 0

    public var amount: String = String()

    public var payload: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// restake the duration and autoStake flag of bucket
  public struct Restake {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bucketIndex: UInt64 = 0

    public var stakedDuration: UInt32 = 0

    public var autoStake: Bool = false

    public var payload: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// move the bucket to vote for another candidate or transfer the ownership of bucket to another voters
  public struct ChangeCandidate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bucketIndex: UInt64 = 0

    public var candidateName: String = String()

    public var payload: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct TransferOwnership {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bucketIndex: UInt64 = 0

    public var voterAddress: String = String()

    public var payload: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct CandidateBasicInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var name: String = String()

    public var operatorAddress: String = String()

    public var rewardAddress: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct CandidateRegister {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var candidate: TW_IoTeX_Proto_Staking.CandidateBasicInfo {
      get {return _candidate ?? TW_IoTeX_Proto_Staking.CandidateBasicInfo()}
      set {_candidate = newValue}
    }
    /// Returns true if `candidate` has been explicitly set.
    public var hasCandidate: Bool {return self._candidate != nil}
    /// Clears the value of `candidate`. Subsequent reads from it will return its default value.
    public mutating func clearCandidate() {self._candidate = nil}

    public var stakedAmount: String = String()

    public var stakedDuration: UInt32 = 0

    public var autoStake: Bool = false

    /// if ownerAddress is absent, owner of candidate is the sender
    public var ownerAddress: String = String()

    public var payload: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _candidate: TW_IoTeX_Proto_Staking.CandidateBasicInfo? = nil
  }

  public init() {}
}

public struct TW_IoTeX_Proto_ContractCall {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var amount: String = String()

  public var contract: String = String()

  public var data: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// transaction signing input
public struct TW_IoTeX_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: UInt32 = 0

  public var nonce: UInt64 = 0

  public var gasLimit: UInt64 = 0

  public var gasPrice: String = String()

  public var privateKey: Data = SwiftProtobuf.Internal.emptyData

  public var action: TW_IoTeX_Proto_SigningInput.OneOf_Action? = nil

  public var transfer: TW_IoTeX_Proto_Transfer {
    get {
      if case .transfer(let v)? = action {return v}
      return TW_IoTeX_Proto_Transfer()
    }
    set {action = .transfer(newValue)}
  }

  public var call: TW_IoTeX_Proto_ContractCall {
    get {
      if case .call(let v)? = action {return v}
      return TW_IoTeX_Proto_ContractCall()
    }
    set {action = .call(newValue)}
  }

  /// Native staking
  public var stakeCreate: TW_IoTeX_Proto_Staking.Create {
    get {
      if case .stakeCreate(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.Create()
    }
    set {action = .stakeCreate(newValue)}
  }

  public var stakeUnstake: TW_IoTeX_Proto_Staking.Reclaim {
    get {
      if case .stakeUnstake(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.Reclaim()
    }
    set {action = .stakeUnstake(newValue)}
  }

  public var stakeWithdraw: TW_IoTeX_Proto_Staking.Reclaim {
    get {
      if case .stakeWithdraw(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.Reclaim()
    }
    set {action = .stakeWithdraw(newValue)}
  }

  public var stakeAddDeposit: TW_IoTeX_Proto_Staking.AddDeposit {
    get {
      if case .stakeAddDeposit(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.AddDeposit()
    }
    set {action = .stakeAddDeposit(newValue)}
  }

  public var stakeRestake: TW_IoTeX_Proto_Staking.Restake {
    get {
      if case .stakeRestake(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.Restake()
    }
    set {action = .stakeRestake(newValue)}
  }

  public var stakeChangeCandidate: TW_IoTeX_Proto_Staking.ChangeCandidate {
    get {
      if case .stakeChangeCandidate(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.ChangeCandidate()
    }
    set {action = .stakeChangeCandidate(newValue)}
  }

  public var stakeTransferOwnership: TW_IoTeX_Proto_Staking.TransferOwnership {
    get {
      if case .stakeTransferOwnership(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.TransferOwnership()
    }
    set {action = .stakeTransferOwnership(newValue)}
  }

  public var candidateRegister: TW_IoTeX_Proto_Staking.CandidateRegister {
    get {
      if case .candidateRegister(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.CandidateRegister()
    }
    set {action = .candidateRegister(newValue)}
  }

  public var candidateUpdate: TW_IoTeX_Proto_Staking.CandidateBasicInfo {
    get {
      if case .candidateUpdate(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.CandidateBasicInfo()
    }
    set {action = .candidateUpdate(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Action: Equatable {
    case transfer(TW_IoTeX_Proto_Transfer)
    case call(TW_IoTeX_Proto_ContractCall)
    /// Native staking
    case stakeCreate(TW_IoTeX_Proto_Staking.Create)
    case stakeUnstake(TW_IoTeX_Proto_Staking.Reclaim)
    case stakeWithdraw(TW_IoTeX_Proto_Staking.Reclaim)
    case stakeAddDeposit(TW_IoTeX_Proto_Staking.AddDeposit)
    case stakeRestake(TW_IoTeX_Proto_Staking.Restake)
    case stakeChangeCandidate(TW_IoTeX_Proto_Staking.ChangeCandidate)
    case stakeTransferOwnership(TW_IoTeX_Proto_Staking.TransferOwnership)
    case candidateRegister(TW_IoTeX_Proto_Staking.CandidateRegister)
    case candidateUpdate(TW_IoTeX_Proto_Staking.CandidateBasicInfo)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_IoTeX_Proto_SigningInput.OneOf_Action, rhs: TW_IoTeX_Proto_SigningInput.OneOf_Action) -> Bool {
      switch (lhs, rhs) {
      case (.transfer(let l), .transfer(let r)): return l == r
      case (.call(let l), .call(let r)): return l == r
      case (.stakeCreate(let l), .stakeCreate(let r)): return l == r
      case (.stakeUnstake(let l), .stakeUnstake(let r)): return l == r
      case (.stakeWithdraw(let l), .stakeWithdraw(let r)): return l == r
      case (.stakeAddDeposit(let l), .stakeAddDeposit(let r)): return l == r
      case (.stakeRestake(let l), .stakeRestake(let r)): return l == r
      case (.stakeChangeCandidate(let l), .stakeChangeCandidate(let r)): return l == r
      case (.stakeTransferOwnership(let l), .stakeTransferOwnership(let r)): return l == r
      case (.candidateRegister(let l), .candidateRegister(let r)): return l == r
      case (.candidateUpdate(let l), .candidateUpdate(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// transaction signing output
public struct TW_IoTeX_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signed and encoded Action bytes
  public var encoded: Data = SwiftProtobuf.Internal.emptyData

  /// Signed Action hash
  public var hash: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_IoTeX_Proto_ActionCore {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: UInt32 = 0

  public var nonce: UInt64 = 0

  public var gasLimit: UInt64 = 0

  public var gasPrice: String = String()

  public var action: TW_IoTeX_Proto_ActionCore.OneOf_Action? = nil

  public var transfer: TW_IoTeX_Proto_Transfer {
    get {
      if case .transfer(let v)? = action {return v}
      return TW_IoTeX_Proto_Transfer()
    }
    set {action = .transfer(newValue)}
  }

  public var execution: TW_IoTeX_Proto_ContractCall {
    get {
      if case .execution(let v)? = action {return v}
      return TW_IoTeX_Proto_ContractCall()
    }
    set {action = .execution(newValue)}
  }

  /// Native staking
  public var stakeCreate: TW_IoTeX_Proto_Staking.Create {
    get {
      if case .stakeCreate(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.Create()
    }
    set {action = .stakeCreate(newValue)}
  }

  public var stakeUnstake: TW_IoTeX_Proto_Staking.Reclaim {
    get {
      if case .stakeUnstake(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.Reclaim()
    }
    set {action = .stakeUnstake(newValue)}
  }

  public var stakeWithdraw: TW_IoTeX_Proto_Staking.Reclaim {
    get {
      if case .stakeWithdraw(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.Reclaim()
    }
    set {action = .stakeWithdraw(newValue)}
  }

  public var stakeAddDeposit: TW_IoTeX_Proto_Staking.AddDeposit {
    get {
      if case .stakeAddDeposit(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.AddDeposit()
    }
    set {action = .stakeAddDeposit(newValue)}
  }

  public var stakeRestake: TW_IoTeX_Proto_Staking.Restake {
    get {
      if case .stakeRestake(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.Restake()
    }
    set {action = .stakeRestake(newValue)}
  }

  public var stakeChangeCandidate: TW_IoTeX_Proto_Staking.ChangeCandidate {
    get {
      if case .stakeChangeCandidate(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.ChangeCandidate()
    }
    set {action = .stakeChangeCandidate(newValue)}
  }

  public var stakeTransferOwnership: TW_IoTeX_Proto_Staking.TransferOwnership {
    get {
      if case .stakeTransferOwnership(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.TransferOwnership()
    }
    set {action = .stakeTransferOwnership(newValue)}
  }

  public var candidateRegister: TW_IoTeX_Proto_Staking.CandidateRegister {
    get {
      if case .candidateRegister(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.CandidateRegister()
    }
    set {action = .candidateRegister(newValue)}
  }

  public var candidateUpdate: TW_IoTeX_Proto_Staking.CandidateBasicInfo {
    get {
      if case .candidateUpdate(let v)? = action {return v}
      return TW_IoTeX_Proto_Staking.CandidateBasicInfo()
    }
    set {action = .candidateUpdate(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Action: Equatable {
    case transfer(TW_IoTeX_Proto_Transfer)
    case execution(TW_IoTeX_Proto_ContractCall)
    /// Native staking
    case stakeCreate(TW_IoTeX_Proto_Staking.Create)
    case stakeUnstake(TW_IoTeX_Proto_Staking.Reclaim)
    case stakeWithdraw(TW_IoTeX_Proto_Staking.Reclaim)
    case stakeAddDeposit(TW_IoTeX_Proto_Staking.AddDeposit)
    case stakeRestake(TW_IoTeX_Proto_Staking.Restake)
    case stakeChangeCandidate(TW_IoTeX_Proto_Staking.ChangeCandidate)
    case stakeTransferOwnership(TW_IoTeX_Proto_Staking.TransferOwnership)
    case candidateRegister(TW_IoTeX_Proto_Staking.CandidateRegister)
    case candidateUpdate(TW_IoTeX_Proto_Staking.CandidateBasicInfo)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_IoTeX_Proto_ActionCore.OneOf_Action, rhs: TW_IoTeX_Proto_ActionCore.OneOf_Action) -> Bool {
      switch (lhs, rhs) {
      case (.transfer(let l), .transfer(let r)): return l == r
      case (.execution(let l), .execution(let r)): return l == r
      case (.stakeCreate(let l), .stakeCreate(let r)): return l == r
      case (.stakeUnstake(let l), .stakeUnstake(let r)): return l == r
      case (.stakeWithdraw(let l), .stakeWithdraw(let r)): return l == r
      case (.stakeAddDeposit(let l), .stakeAddDeposit(let r)): return l == r
      case (.stakeRestake(let l), .stakeRestake(let r)): return l == r
      case (.stakeChangeCandidate(let l), .stakeChangeCandidate(let r)): return l == r
      case (.stakeTransferOwnership(let l), .stakeTransferOwnership(let r)): return l == r
      case (.candidateRegister(let l), .candidateRegister(let r)): return l == r
      case (.candidateUpdate(let l), .candidateUpdate(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct TW_IoTeX_Proto_Action {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var core: TW_IoTeX_Proto_ActionCore {
    get {return _core ?? TW_IoTeX_Proto_ActionCore()}
    set {_core = newValue}
  }
  /// Returns true if `core` has been explicitly set.
  public var hasCore: Bool {return self._core != nil}
  /// Clears the value of `core`. Subsequent reads from it will return its default value.
  public mutating func clearCore() {self._core = nil}

  public var senderPubKey: Data = SwiftProtobuf.Internal.emptyData

  public var signature: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _core: TW_IoTeX_Proto_ActionCore? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.IoTeX.Proto"

extension TW_IoTeX_Proto_Transfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .same(proto: "recipient"),
    3: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.amount)
      case 2: try decoder.decodeSingularStringField(value: &self.recipient)
      case 3: try decoder.decodeSingularBytesField(value: &self.payload)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 1)
    }
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_Transfer, rhs: TW_IoTeX_Proto_Transfer) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_Staking: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Staking"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stakeCreate"),
    2: .same(proto: "stakeUnstake"),
    3: .same(proto: "stakeWithdraw"),
    4: .same(proto: "stakeAddDeposit"),
    5: .same(proto: "stakeRestake"),
    6: .same(proto: "stakeChangeCandidate"),
    7: .same(proto: "stakeTransferOwnership"),
    8: .same(proto: "candidateRegister"),
    9: .same(proto: "candidateUpdate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: TW_IoTeX_Proto_Staking.Create?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .stakeCreate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .stakeCreate(v)}
      case 2:
        var v: TW_IoTeX_Proto_Staking.Reclaim?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .stakeUnstake(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .stakeUnstake(v)}
      case 3:
        var v: TW_IoTeX_Proto_Staking.Reclaim?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .stakeWithdraw(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .stakeWithdraw(v)}
      case 4:
        var v: TW_IoTeX_Proto_Staking.AddDeposit?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .stakeAddDeposit(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .stakeAddDeposit(v)}
      case 5:
        var v: TW_IoTeX_Proto_Staking.Restake?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .stakeRestake(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .stakeRestake(v)}
      case 6:
        var v: TW_IoTeX_Proto_Staking.ChangeCandidate?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .stakeChangeCandidate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .stakeChangeCandidate(v)}
      case 7:
        var v: TW_IoTeX_Proto_Staking.TransferOwnership?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .stakeTransferOwnership(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .stakeTransferOwnership(v)}
      case 8:
        var v: TW_IoTeX_Proto_Staking.CandidateRegister?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .candidateRegister(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .candidateRegister(v)}
      case 9:
        var v: TW_IoTeX_Proto_Staking.CandidateBasicInfo?
        if let current = self.message {
          try decoder.handleConflictingOneOf()
          if case .candidateUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.message = .candidateUpdate(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.message {
    case .stakeCreate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .stakeUnstake(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .stakeWithdraw(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .stakeAddDeposit(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .stakeRestake(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .stakeChangeCandidate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case .stakeTransferOwnership(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    case .candidateRegister(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    case .candidateUpdate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_Staking, rhs: TW_IoTeX_Proto_Staking) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_Staking.Create: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_IoTeX_Proto_Staking.protoMessageName + ".Create"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "candidateName"),
    2: .same(proto: "stakedAmount"),
    3: .same(proto: "stakedDuration"),
    4: .same(proto: "autoStake"),
    5: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.candidateName)
      case 2: try decoder.decodeSingularStringField(value: &self.stakedAmount)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.stakedDuration)
      case 4: try decoder.decodeSingularBoolField(value: &self.autoStake)
      case 5: try decoder.decodeSingularBytesField(value: &self.payload)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.candidateName.isEmpty {
      try visitor.visitSingularStringField(value: self.candidateName, fieldNumber: 1)
    }
    if !self.stakedAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.stakedAmount, fieldNumber: 2)
    }
    if self.stakedDuration != 0 {
      try visitor.visitSingularUInt32Field(value: self.stakedDuration, fieldNumber: 3)
    }
    if self.autoStake != false {
      try visitor.visitSingularBoolField(value: self.autoStake, fieldNumber: 4)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_Staking.Create, rhs: TW_IoTeX_Proto_Staking.Create) -> Bool {
    if lhs.candidateName != rhs.candidateName {return false}
    if lhs.stakedAmount != rhs.stakedAmount {return false}
    if lhs.stakedDuration != rhs.stakedDuration {return false}
    if lhs.autoStake != rhs.autoStake {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_Staking.Reclaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_IoTeX_Proto_Staking.protoMessageName + ".Reclaim"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucketIndex"),
    2: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.bucketIndex)
      case 2: try decoder.decodeSingularBytesField(value: &self.payload)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bucketIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.bucketIndex, fieldNumber: 1)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_Staking.Reclaim, rhs: TW_IoTeX_Proto_Staking.Reclaim) -> Bool {
    if lhs.bucketIndex != rhs.bucketIndex {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_Staking.AddDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_IoTeX_Proto_Staking.protoMessageName + ".AddDeposit"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucketIndex"),
    2: .same(proto: "amount"),
    3: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.bucketIndex)
      case 2: try decoder.decodeSingularStringField(value: &self.amount)
      case 3: try decoder.decodeSingularBytesField(value: &self.payload)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bucketIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.bucketIndex, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_Staking.AddDeposit, rhs: TW_IoTeX_Proto_Staking.AddDeposit) -> Bool {
    if lhs.bucketIndex != rhs.bucketIndex {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_Staking.Restake: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_IoTeX_Proto_Staking.protoMessageName + ".Restake"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucketIndex"),
    2: .same(proto: "stakedDuration"),
    3: .same(proto: "autoStake"),
    4: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.bucketIndex)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.stakedDuration)
      case 3: try decoder.decodeSingularBoolField(value: &self.autoStake)
      case 4: try decoder.decodeSingularBytesField(value: &self.payload)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bucketIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.bucketIndex, fieldNumber: 1)
    }
    if self.stakedDuration != 0 {
      try visitor.visitSingularUInt32Field(value: self.stakedDuration, fieldNumber: 2)
    }
    if self.autoStake != false {
      try visitor.visitSingularBoolField(value: self.autoStake, fieldNumber: 3)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_Staking.Restake, rhs: TW_IoTeX_Proto_Staking.Restake) -> Bool {
    if lhs.bucketIndex != rhs.bucketIndex {return false}
    if lhs.stakedDuration != rhs.stakedDuration {return false}
    if lhs.autoStake != rhs.autoStake {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_Staking.ChangeCandidate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_IoTeX_Proto_Staking.protoMessageName + ".ChangeCandidate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucketIndex"),
    2: .same(proto: "candidateName"),
    3: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.bucketIndex)
      case 2: try decoder.decodeSingularStringField(value: &self.candidateName)
      case 3: try decoder.decodeSingularBytesField(value: &self.payload)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bucketIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.bucketIndex, fieldNumber: 1)
    }
    if !self.candidateName.isEmpty {
      try visitor.visitSingularStringField(value: self.candidateName, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_Staking.ChangeCandidate, rhs: TW_IoTeX_Proto_Staking.ChangeCandidate) -> Bool {
    if lhs.bucketIndex != rhs.bucketIndex {return false}
    if lhs.candidateName != rhs.candidateName {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_Staking.TransferOwnership: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_IoTeX_Proto_Staking.protoMessageName + ".TransferOwnership"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bucketIndex"),
    2: .same(proto: "voterAddress"),
    3: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.bucketIndex)
      case 2: try decoder.decodeSingularStringField(value: &self.voterAddress)
      case 3: try decoder.decodeSingularBytesField(value: &self.payload)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bucketIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.bucketIndex, fieldNumber: 1)
    }
    if !self.voterAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.voterAddress, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_Staking.TransferOwnership, rhs: TW_IoTeX_Proto_Staking.TransferOwnership) -> Bool {
    if lhs.bucketIndex != rhs.bucketIndex {return false}
    if lhs.voterAddress != rhs.voterAddress {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_Staking.CandidateBasicInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_IoTeX_Proto_Staking.protoMessageName + ".CandidateBasicInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "operatorAddress"),
    3: .same(proto: "rewardAddress"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.operatorAddress)
      case 3: try decoder.decodeSingularStringField(value: &self.rewardAddress)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.operatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.operatorAddress, fieldNumber: 2)
    }
    if !self.rewardAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.rewardAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_Staking.CandidateBasicInfo, rhs: TW_IoTeX_Proto_Staking.CandidateBasicInfo) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.operatorAddress != rhs.operatorAddress {return false}
    if lhs.rewardAddress != rhs.rewardAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_Staking.CandidateRegister: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_IoTeX_Proto_Staking.protoMessageName + ".CandidateRegister"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "candidate"),
    2: .same(proto: "stakedAmount"),
    3: .same(proto: "stakedDuration"),
    4: .same(proto: "autoStake"),
    5: .same(proto: "ownerAddress"),
    6: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._candidate)
      case 2: try decoder.decodeSingularStringField(value: &self.stakedAmount)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.stakedDuration)
      case 4: try decoder.decodeSingularBoolField(value: &self.autoStake)
      case 5: try decoder.decodeSingularStringField(value: &self.ownerAddress)
      case 6: try decoder.decodeSingularBytesField(value: &self.payload)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._candidate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.stakedAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.stakedAmount, fieldNumber: 2)
    }
    if self.stakedDuration != 0 {
      try visitor.visitSingularUInt32Field(value: self.stakedDuration, fieldNumber: 3)
    }
    if self.autoStake != false {
      try visitor.visitSingularBoolField(value: self.autoStake, fieldNumber: 4)
    }
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 5)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_Staking.CandidateRegister, rhs: TW_IoTeX_Proto_Staking.CandidateRegister) -> Bool {
    if lhs._candidate != rhs._candidate {return false}
    if lhs.stakedAmount != rhs.stakedAmount {return false}
    if lhs.stakedDuration != rhs.stakedDuration {return false}
    if lhs.autoStake != rhs.autoStake {return false}
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_ContractCall: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContractCall"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .same(proto: "contract"),
    3: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.amount)
      case 2: try decoder.decodeSingularStringField(value: &self.contract)
      case 3: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 1)
    }
    if !self.contract.isEmpty {
      try visitor.visitSingularStringField(value: self.contract, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_ContractCall, rhs: TW_IoTeX_Proto_ContractCall) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.contract != rhs.contract {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "nonce"),
    3: .same(proto: "gasLimit"),
    4: .same(proto: "gasPrice"),
    5: .same(proto: "privateKey"),
    10: .same(proto: "transfer"),
    12: .same(proto: "call"),
    40: .same(proto: "stakeCreate"),
    41: .same(proto: "stakeUnstake"),
    42: .same(proto: "stakeWithdraw"),
    43: .same(proto: "stakeAddDeposit"),
    44: .same(proto: "stakeRestake"),
    45: .same(proto: "stakeChangeCandidate"),
    46: .same(proto: "stakeTransferOwnership"),
    47: .same(proto: "candidateRegister"),
    48: .same(proto: "candidateUpdate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.version)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.nonce)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.gasLimit)
      case 4: try decoder.decodeSingularStringField(value: &self.gasPrice)
      case 5: try decoder.decodeSingularBytesField(value: &self.privateKey)
      case 10:
        var v: TW_IoTeX_Proto_Transfer?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .transfer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .transfer(v)}
      case 12:
        var v: TW_IoTeX_Proto_ContractCall?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .call(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .call(v)}
      case 40:
        var v: TW_IoTeX_Proto_Staking.Create?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeCreate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeCreate(v)}
      case 41:
        var v: TW_IoTeX_Proto_Staking.Reclaim?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeUnstake(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeUnstake(v)}
      case 42:
        var v: TW_IoTeX_Proto_Staking.Reclaim?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeWithdraw(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeWithdraw(v)}
      case 43:
        var v: TW_IoTeX_Proto_Staking.AddDeposit?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeAddDeposit(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeAddDeposit(v)}
      case 44:
        var v: TW_IoTeX_Proto_Staking.Restake?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeRestake(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeRestake(v)}
      case 45:
        var v: TW_IoTeX_Proto_Staking.ChangeCandidate?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeChangeCandidate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeChangeCandidate(v)}
      case 46:
        var v: TW_IoTeX_Proto_Staking.TransferOwnership?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeTransferOwnership(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeTransferOwnership(v)}
      case 47:
        var v: TW_IoTeX_Proto_Staking.CandidateRegister?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .candidateRegister(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .candidateRegister(v)}
      case 48:
        var v: TW_IoTeX_Proto_Staking.CandidateBasicInfo?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .candidateUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .candidateUpdate(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    if self.nonce != 0 {
      try visitor.visitSingularUInt64Field(value: self.nonce, fieldNumber: 2)
    }
    if self.gasLimit != 0 {
      try visitor.visitSingularUInt64Field(value: self.gasLimit, fieldNumber: 3)
    }
    if !self.gasPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.gasPrice, fieldNumber: 4)
    }
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 5)
    }
    switch self.action {
    case .transfer(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    case .call(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    case .stakeCreate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
    case .stakeUnstake(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
    case .stakeWithdraw(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 42)
    case .stakeAddDeposit(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 43)
    case .stakeRestake(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 44)
    case .stakeChangeCandidate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 45)
    case .stakeTransferOwnership(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 46)
    case .candidateRegister(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 47)
    case .candidateUpdate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 48)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_SigningInput, rhs: TW_IoTeX_Proto_SigningInput) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.gasLimit != rhs.gasLimit {return false}
    if lhs.gasPrice != rhs.gasPrice {return false}
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoded"),
    2: .same(proto: "hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.encoded)
      case 2: try decoder.decodeSingularBytesField(value: &self.hash)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 1)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_SigningOutput, rhs: TW_IoTeX_Proto_SigningOutput) -> Bool {
    if lhs.encoded != rhs.encoded {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_ActionCore: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActionCore"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "nonce"),
    3: .same(proto: "gasLimit"),
    4: .same(proto: "gasPrice"),
    10: .same(proto: "transfer"),
    12: .same(proto: "execution"),
    40: .same(proto: "stakeCreate"),
    41: .same(proto: "stakeUnstake"),
    42: .same(proto: "stakeWithdraw"),
    43: .same(proto: "stakeAddDeposit"),
    44: .same(proto: "stakeRestake"),
    45: .same(proto: "stakeChangeCandidate"),
    46: .same(proto: "stakeTransferOwnership"),
    47: .same(proto: "candidateRegister"),
    48: .same(proto: "candidateUpdate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.version)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.nonce)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.gasLimit)
      case 4: try decoder.decodeSingularStringField(value: &self.gasPrice)
      case 10:
        var v: TW_IoTeX_Proto_Transfer?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .transfer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .transfer(v)}
      case 12:
        var v: TW_IoTeX_Proto_ContractCall?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .execution(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .execution(v)}
      case 40:
        var v: TW_IoTeX_Proto_Staking.Create?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeCreate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeCreate(v)}
      case 41:
        var v: TW_IoTeX_Proto_Staking.Reclaim?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeUnstake(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeUnstake(v)}
      case 42:
        var v: TW_IoTeX_Proto_Staking.Reclaim?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeWithdraw(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeWithdraw(v)}
      case 43:
        var v: TW_IoTeX_Proto_Staking.AddDeposit?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeAddDeposit(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeAddDeposit(v)}
      case 44:
        var v: TW_IoTeX_Proto_Staking.Restake?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeRestake(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeRestake(v)}
      case 45:
        var v: TW_IoTeX_Proto_Staking.ChangeCandidate?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeChangeCandidate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeChangeCandidate(v)}
      case 46:
        var v: TW_IoTeX_Proto_Staking.TransferOwnership?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .stakeTransferOwnership(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .stakeTransferOwnership(v)}
      case 47:
        var v: TW_IoTeX_Proto_Staking.CandidateRegister?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .candidateRegister(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .candidateRegister(v)}
      case 48:
        var v: TW_IoTeX_Proto_Staking.CandidateBasicInfo?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .candidateUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .candidateUpdate(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    if self.nonce != 0 {
      try visitor.visitSingularUInt64Field(value: self.nonce, fieldNumber: 2)
    }
    if self.gasLimit != 0 {
      try visitor.visitSingularUInt64Field(value: self.gasLimit, fieldNumber: 3)
    }
    if !self.gasPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.gasPrice, fieldNumber: 4)
    }
    switch self.action {
    case .transfer(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    case .execution(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    case .stakeCreate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
    case .stakeUnstake(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
    case .stakeWithdraw(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 42)
    case .stakeAddDeposit(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 43)
    case .stakeRestake(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 44)
    case .stakeChangeCandidate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 45)
    case .stakeTransferOwnership(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 46)
    case .candidateRegister(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 47)
    case .candidateUpdate(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 48)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_ActionCore, rhs: TW_IoTeX_Proto_ActionCore) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.gasLimit != rhs.gasLimit {return false}
    if lhs.gasPrice != rhs.gasPrice {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_IoTeX_Proto_Action: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Action"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "core"),
    2: .same(proto: "senderPubKey"),
    3: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._core)
      case 2: try decoder.decodeSingularBytesField(value: &self.senderPubKey)
      case 3: try decoder.decodeSingularBytesField(value: &self.signature)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._core {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.senderPubKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.senderPubKey, fieldNumber: 2)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_IoTeX_Proto_Action, rhs: TW_IoTeX_Proto_Action) -> Bool {
    if lhs._core != rhs._core {return false}
    if lhs.senderPubKey != rhs.senderPubKey {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
